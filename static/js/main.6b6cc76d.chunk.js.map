{"version":3,"sources":["logo.svg","NewsCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withStyles","theme","_card","card","width","margin","Object","defineProperty","breakpoints","up","media","height","_ref","classes","data","react_default","a","createElement","Card_default","className","CardActionArea_default","CardMedia_default","image","urlToImage","title","CardContent_default","Typography_default","gutterBottom","variant","component","content","CardActions_default","Button_default","size","color","href","url","App","state","concat","config","fetch","response","json","this","setState","articles","props","root","index_es","news","map","src_NewsCard","key","Component","display","flexWrap","flex","marginTop","spacing","unit","position","justifyContent","withTheme","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","workbox","self","addEventListener","event","cacheWhitelist","waitUntil","caches","keys","keyList","Promise","all","includes","delete","e","request","indexOf","respondWith","open","cache","put","clone","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6b6cc76d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  card: {\n    width: '100%',\n    // maxWidth: 345,\n    margin: 5,\n    [theme.breakpoints.up('sm')]: {\n      width: '45%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '30%',\n    },\n    [theme.breakpoints.up('lg')]: {\n      width: '24%',\n    },\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst NewsCard = ({ classes, data }) => (\n  <Card className={classes.card}>\n    <CardActionArea>\n      <CardMedia\n        className={classes.media}\n        image={data.urlToImage}\n        title={data.title}\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {data.title}\n        </Typography>\n        <Typography component=\"p\">\n          {data.content}\n        </Typography>\n      </CardContent>\n    </CardActionArea>\n    <CardActions>\n      <Button size=\"small\" color=\"primary\" href={data.url}>\n        Open\n      </Button>\n    </CardActions>\n  </Card>\n)\n\nNewsCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(NewsCard);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as config from './config.json'\n\nimport { withStyles, Typography } from '@material-ui/core'\n\nimport NewsCard from './NewsCard'\n\nconst styles = theme => ({\n  root: {\n  },\n  news: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flex: 1,\n    marginTop: theme.spacing.unit,\n    position: 'relative',   \n    justifyContent: 'space-between', \n  }\n})\n\nclass App extends Component {\n  state = {\n    data: [],\n  }\n  async componentDidMount() {\n    var url = 'https://newsapi.org/v2/top-headlines?' +\n          'country=ru&' +\n          `apiKey=${config.api}`;\n\n    let response = await fetch(url);\n  // only proceed once promise is resolved\n    let data = await response.json();\n    this.setState({ data: data.articles })\n  }\n  render() {\n    const { classes } = this.props\n    const { data } = this.state\n    // if (data.)\n    return (\n      <div className={classes.root}>\n        <Typography variant=\"h2\">News</Typography>\n        <div className={classes.news}>\n          {data.map(news => (\n            <NewsCard\n              key={news.title}\n              data={news}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nconsole.log(window.workbox)\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n// Set this to true for production\nvar doCache = false;\n\n// Name our cache\nvar CACHE_NAME = 'my-pwa-cache-v1';\n\n// Delete old caches that are not our current one!\nwindow.self.addEventListener(\"activate\", event => {\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys()\n      .then(keyList =>\n        Promise.all(keyList.map(key => {\n          if (!cacheWhitelist.includes(key)) {\n            console.log('Deleting cache: ' + key)\n            return caches.delete(key);\n          }\n        }))\n      )\n  );\n});\n\n// The first time the user starts up the PWA, 'install' is triggered.\nwindow.self.addEventListener('install', function(event) {\n  if (doCache) {\n    event.waitUntil(\n      caches.open(CACHE_NAME)\n        .then(function(cache) {\n          // Get the assets manifest so we can see what our js file is named\n          // This is because webpack hashes it\n          fetch(\"asset-manifest.json\")\n            .then(response => {\n              response.json()\n            })\n            .then(assets => {\n              // Open a cache and cache our files\n              // We want to cache the page and the main.js generated by webpack\n              // We could also cache any static assets like CSS or images\n              const urlsToCache = [\n                \"/\",\n                assets[\"main.js\"]\n              ]\n              cache.addAll(urlsToCache)\n              console.log('cached');\n            })\n        })\n    );\n  }\n});\n\n// When the webpage goes to fetch files, we intercept that request and serve up the matching files\n// if we have them\nwindow.self.addEventListener('fetch', function(e) {\n  var dataUrl = 'https://newsapi.org/v2/top-headlines';\n  if (e.request.url.indexOf(dataUrl) > -1) {\n    e.respondWith(\n      caches.open(CACHE_NAME).then(function(cache) {\n        return fetch(e.request).then(function(response){\n          cache.put(e.request.url, response.clone());\n          return response;\n        });\n      })\n    );\n  } else {\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request);\n      })\n    );\n  }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}