{"version":3,"sources":["logo.svg","NewsCard.js","App.js","pushNotification.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withStyles","theme","_card","card","width","margin","Object","defineProperty","breakpoints","up","media","height","_ref","classes","data","react_default","a","createElement","Card_default","className","CardActionArea_default","CardMedia_default","image","urlToImage","title","CardContent_default","Typography_default","gutterBottom","variant","component","content","CardActions_default","Button_default","size","color","href","url","App","state","isLoading","concat","config","fetch","response","json","this","setState","articles","props","_this$state","index_es","root","news","map","src_NewsCard","key","Component","padding","display","flexWrap","flex","marginTop","spacing","unit","position","withTheme","applicationServerPublicKey","pushButton","document","querySelector","isSubscribed","swRegistration","updateBtn","Notification","permission","textContent","disabled","updateSubscriptionOnServer","subscription","subscriptionJson","subscriptionDetails","JSON","stringify","classList","remove","add","subscribeUser","applicationServerKey","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","urlB64ToUint8Array","console","log","pushManager","subscribe","userVisibleOnly","then","catch","err","initializeUI","registration","getSubscription","navigator","warn","isLocalhost","Boolean","location","hostname","match","workbox","registerValidSW","swUrl","serviceWorker","register","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","self","addEventListener","event","cacheWhitelist","waitUntil","caches","keys","keyList","Promise","all","includes","delete","e","request","indexOf","respondWith","open","cache","put","clone","text","showNotification","body","icon","badge","notification","close","clients","openWindow","newSubscription","ReactDOM","render","src_App_0","getElementById","URL","process","origin","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f163f3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n  card: {\n    width: '100%',\n    // maxWidth: 345,\n    margin: 5,\n    [theme.breakpoints.up('sm')]: {\n      width: '45%',\n    },\n    [theme.breakpoints.up('md')]: {\n      width: '30%',\n    },\n    [theme.breakpoints.up('lg')]: {\n      width: '24%',\n    },\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst NewsCard = ({ classes, data }) => (\n  <Card className={classes.card}>\n    <CardActionArea>\n      <CardMedia\n        className={classes.media}\n        image={data.urlToImage}\n        title={data.title}\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {data.title}\n        </Typography>\n        <Typography component=\"p\">\n          {data.content}\n        </Typography>\n      </CardContent>\n    </CardActionArea>\n    <CardActions>\n      <Button size=\"small\" color=\"primary\" href={data.url}>\n        Open\n      </Button>\n    </CardActions>\n  </Card>\n)\n\nNewsCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(NewsCard);","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport * as config from './config.json'\n\nimport { withStyles, Typography, LinearProgress, Paper } from '@material-ui/core'\n\nimport NewsCard from './NewsCard'\n\nconst styles = theme => ({\n  root: {\n    padding: 10,\n  },\n  news: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flex: 1,\n    marginTop: theme.spacing.unit,\n    position: 'relative',\n  }\n})\n\nclass App extends Component {\n  state = {\n    data: [],\n    isLoading: true,\n  }\n  async componentDidMount() {\n    var url = 'https://newsapi.org/v2/top-headlines?' +\n          'country=ru&' +\n          `apiKey=${config.api}`;\n\n    let response = await fetch(url);\n  // only proceed once promise is resolved\n    let data = await response.json();\n    this.setState({ data: data.articles, isLoading: false, })\n  }\n  render() {\n    const { classes } = this.props\n    const { data, isLoading } = this.state\n\n    return (\n      <Paper className={classes.root}>\n        <Typography variant=\"h1\" color=\"primary\">News</Typography>\n        <Typography>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n          incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud\n          exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure\n          dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </Typography>\n        <button className=\"js-push-btn\">Subscribe</button>\n        {isLoading && (\n          <LinearProgress />\n        )}\n        {!isLoading && (\n          <div className={classes.news}>\n            {data.map(news => (\n              <NewsCard\n                key={news.title}\n                data={news}\n              />\n            ))}\n          </div>\n        )}\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(App);\n","const applicationServerPublicKey = 'BFfpfENIVdfo3-OP50Zce8FA8GW04l9CAmNwen1vVAh9n0BgLsA0MJICiYPb5yDoGiZcAXC1xYGOz61tRZdqRjI';\n\nconst pushButton = document.querySelector('.js-push-btn');\n\nlet isSubscribed = false;\nlet swRegistration = null;\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nfunction updateBtn() {\n  if (Notification.permission === 'denied') {\n    pushButton.textContent = 'Push Messaging Blocked.';\n    pushButton.disabled = true;\n    updateSubscriptionOnServer(null);\n    return;\n  }\n\n  if (isSubscribed) {\n    pushButton.textContent = 'Disable Push Messaging';\n  } else {\n    pushButton.textContent = 'Enable Push Messaging';\n  }\n\n  pushButton.disabled = false;\n}\n\nfunction updateSubscriptionOnServer(subscription) {\n  // TODO: Send subscription to application server\n\n  const subscriptionJson = document.querySelector('.js-subscription-json');\n  const subscriptionDetails =\n    document.querySelector('.js-subscription-details');\n\n  if (subscription) {\n    subscriptionJson.textContent = JSON.stringify(subscription);\n    subscriptionDetails.classList.remove('is-invisible');\n  } else {\n    subscriptionDetails.classList.add('is-invisible');\n  }\n}\n\nfunction subscribeUser() {\n  const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);\n\n  console.log('subscribeUser,', swRegistration)\n  swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    applicationServerKey: applicationServerKey\n  })\n  .then(function(subscription) {\n    console.log('User is subscribed.');\n\n    updateSubscriptionOnServer(subscription);\n\n    isSubscribed = true;\n\n    updateBtn();\n  })\n  .catch(function(err) {\n    console.log('Failed to subscribe the user: ', err);\n    updateBtn();\n  });\n}\n\nfunction unsubscribeUser() {\n  swRegistration.pushManager.getSubscription()\n  .then(function(subscription) {\n    if (subscription) {\n      return subscription.unsubscribe();\n    }\n  })\n  .catch(function(error) {\n    console.log('Error unsubscribing', error);\n  })\n  .then(function() {\n    updateSubscriptionOnServer(null);\n\n    console.log('User is unsubscribed.');\n    isSubscribed = false;\n\n    updateBtn();\n  });\n}\n\nexport const initializeUI = (registration) => {\n  swRegistration = registration\n  // pushButton.addEventListener('click', function() {\n  //   pushButton.disabled = true;\n  //   if (isSubscribed) {\n  //     unsubscribeUser();\n  //   } else {\n  //     subscribeUser();\n  //   }\n  // });\n  console.log('initializeUI')\n  subscribeUser();\n\n  // Set the initial subscription value\n  swRegistration.pushManager.getSubscription()\n  .then(function(subscription) {\n    isSubscribed = !(subscription === null);\n\n    updateSubscriptionOnServer(subscription);\n\n    if (isSubscribed) {\n      console.log('User IS subscribed.');\n    } else {\n      console.log('User is NOT subscribed.');\n    }\n\n    updateBtn();\n  });\n}\n\nif ('serviceWorker' in navigator && 'PushManager' in window) {\n  console.log('Service Worker and Push is supported');\n} else {\n  console.warn('Push messaging is not supported');\n  pushButton.textContent = 'Push Not Supported';\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nimport { initializeUI } from './pushNotification'\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nconsole.log(window.workbox)\nlet swRegistration = null\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      console.log('!!!!')\n      swRegistration = registration;\n      initializeUI(registration);\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n// Set this to true for production\nvar doCache = false;\n\n// Name our cache\nvar CACHE_NAME = 'my-pwa-cache-v1';\n\n// Delete old caches that are not our current one!\nwindow.self.addEventListener(\"activate\", event => {\n  const cacheWhitelist = [CACHE_NAME];\n  event.waitUntil(\n    caches.keys()\n      .then(keyList =>\n        Promise.all(keyList.map(key => {\n          if (!cacheWhitelist.includes(key)) {\n            console.log('Deleting cache: ' + key)\n            return caches.delete(key);\n          }\n        }))\n      )\n  );\n});\n\n// The first time the user starts up the PWA, 'install' is triggered.\nwindow.self.addEventListener('install', function(event) {\n  if (doCache) {\n    event.waitUntil(\n      caches.open(CACHE_NAME)\n        .then(function(cache) {\n          // Get the assets manifest so we can see what our js file is named\n          // This is because webpack hashes it\n          fetch(\"asset-manifest.json\")\n            .then(response => {\n              response.json()\n            })\n            .then(assets => {\n              // Open a cache and cache our files\n              // We want to cache the page and the main.js generated by webpack\n              // We could also cache any static assets like CSS or images\n              const urlsToCache = [\n                \"/\",\n                assets[\"main.js\"]\n              ]\n              cache.addAll(urlsToCache)\n              console.log('cached');\n            })\n        })\n    );\n  }\n});\n\n// When the webpage goes to fetch files, we intercept that request and serve up the matching files\n// if we have them\nwindow.self.addEventListener('fetch', function(e) {\n  var dataUrl = 'https://newsapi.org/v2/top-headlines';\n  if (e.request.url.indexOf(dataUrl) > -1) {\n    e.respondWith(\n      caches.open(CACHE_NAME).then(function(cache) {\n        return fetch(e.request).then(function(response){\n          cache.put(e.request.url, response.clone());\n          return response;\n        });\n      })\n    );\n  } else {\n    e.respondWith(\n      caches.match(e.request).then(function(response) {\n        return response || fetch(e.request);\n      })\n    );\n  }\n});\n\n\n/* eslint-disable max-len */\n\nconst applicationServerPublicKey = 'BFfpfENIVdfo3-OP50Zce8FA8GW04l9CAmNwen1vVAh9n0BgLsA0MJICiYPb5yDoGiZcAXC1xYGOz61tRZdqRjI';\n\n/* eslint-enable max-len */\n\nfunction urlB64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nwindow.self.addEventListener('push', function(event) {\n  console.log('[Service Worker] Push Received.');\n  console.log(`[Service Worker] Push had this data: \"${event.data.text()}\"`);\n\n  const title = 'Push Codelab';\n  const options = {\n    body: 'Yay it works.',\n    icon: 'images/icon.png',\n    badge: 'images/badge.png'\n  };\n\n  event.waitUntil(window.self.registration.showNotification(title, options));\n});\n\nwindow.self.addEventListener('notificationclick', function(event) {\n  console.log('[Service Worker] Notification click Received.');\n\n  event.notification.close();\n\n  event.waitUntil(\n    window.self.clients.openWindow('https://developers.google.com/web/')\n  );\n});\n\nwindow.self.addEventListener('pushsubscriptionchange', function(event) {\n  console.log('[Service Worker]: \\'pushsubscriptionchange\\' event fired.');\n  const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);\n  event.waitUntil(\n    window.self.registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: applicationServerKey\n    })\n    .then(function(newSubscription) {\n      // TODO: Send to application server\n      console.log('[Service Worker] New subscription: ', newSubscription);\n    })\n  );\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as push from './pushNotification'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}